package sudoku.model;

import java.io.PrintStream;
import java.util.Random;
import java.util.Scanner;

import javax.swing.JLabel;

import sudoku.dialog.SudokuDialog;

/** An abstraction of Sudoku puzzle. */
public class Board {
	/**
	 * 
	 */
	private PrintStream out = System.out;
	public int[][] table;
	private static int No_Input = 0;
	private boolean [][] truthTable;
	private boolean solvable = false;
	private int counter =0;
	//private int caseNum = 0;
	/** Size of this board (number of columns/rows). */
	public int size;

	/** Create a new board of the given size. */
	public Board(int size) {
		this.size = size;
		this.table = new int [size][size];
		this.truthTable = new boolean[size][size];

	}


	/** Return the size of this board. */

	public int size() {
		return size;
	}




	/**
	 * 
	 * @return
	 */
	public int [][] getTable(){
		return table; 
	}
	//Partially fill a board of size 4 with 4 digits
	// Partially fill a board of size 9 with 17 digits
	public void partialFill(){
		int min =0;int max =size-1; //input limits
		int mink=1; int maxk = size;
		int board4 = 4;int board9 = 17; //numbers to be placed
		int inserted=0;

		Random r = new Random();
		int randominput = r.nextInt(max-min+1)+min; //random row
		int randominput1 = r.nextInt(max-min+1)+min;//random column
		int randomk = r.nextInt(maxk-mink+1)+mink;

		//	System.out.println(randominput+""+randominput1);
		if(size ==4){
			inserted = board4;
		}
		if(size==9){
			inserted = board9;
		}

		if(table[randominput][randominput1]==No_Input && counter < inserted){

			//System.out.println(counter);
			if(!sudokuLaw(randominput,randominput1,randomk)){
				//not sudoku law
				//System.out.println("ERROR");
			}

			if(counter <inserted && sudokuLaw(randominput,randominput1,randomk)&& table[randominput][randominput1]==0){

				counter++;
				table[randominput][randominput1] = randomk;
				//System.out.println("INSERTED " + randomk);

			}
			if(counter>=inserted){
				//board is filled partially
				//System.out.println("Board is filled");
			}
			if(table[randominput][randominput1]==No_Input && counter < inserted){
				partialFill();
			}
			while(counter < inserted){
				partialFill();
			}






		}


	}
	public boolean check(){
		if(isSolved()){
			return true;
		}for(int row = 0;row<size;row++){
			for(int col = 0; col<size;col++){
				if(table[row][col] != No_Input && isSolved()){//full board
					return true;
				}
			}
		}

		return false;
	}

	public boolean solve() {
		//solve entire puzzle 
		//whenever they change board check whether it is solveable with empty squares
		//or fail all INTERACT 
		if(isSolved()){
			return true;
		}
		for(int row = 0;row<size;row++){
			for(int col = 0; col<size;col++){
				int nextRow= row+1;
				int nextCol = col+1;

				if(table[row][col] != No_Input && isSolved()){//full board
					return true;
				}
				for(int k = 1;k<=size;k++){

					if(!sudokuLaw(row,col,k) && table[row][col]== No_Input){

						//System.out.println(k+ " FAILED AT X:" +row+ "  Y:"+col);
						table[row][col] = -1;

					}

					if(table[row][col] ==-1){

						table[row][col]=0;

						//System.out.println("BACK "+ k+"TO ZERO");



					}
					if(sudokuLaw(row,col,k)&& table[row][col] ==No_Input){//if it pases rules of sudoku
						//if(check(k)){//check if solveable/will lead to a solution
						//System.out.println("good here"+ k);
						table[row][col] = k; //then insert it

					}



				}

			}

		}	

		return false;
	}



	/**
	 * 
	 * @param x
	 * @param y
	 * @param v
	 */
	public void insert(int x, int y, int v){
		if(x>size || y > size || v > size || x < 0 || y < 0 ) {

			return;
		}	
		//solve();
		//check();
		//partialFill();
		if(v==No_Input || sudokuLaw(x,y,v)){
			this.table[x][y] = v;
			this.truthTable[x][y] = true;

		}

	}
	/**
	 * 
	 */


	/**
	 * 
	 * @param x
	 * @param y
	 * @param v
	 * @return
	 */
	public boolean sudokuLaw(int x, int y, int v){


		for (int jj = 0; jj < size; jj++) {
			if (table[x][jj] == v) {

				return false;
			}
		}


		for (int ii = 0; ii < size; ii++) {
			if (table[ii][y] == v) {

				return false;
			}
		}


		int boxRow = x - x % (int)Math.sqrt(size);
		int boxColumn = y - y % (int)Math.sqrt(size);

		for (int ii = 0; ii < (int)Math.sqrt(size); ii++) {
			for (int jj = 0; jj < (int)Math.sqrt(size); jj++) {
				if (table[boxRow + ii][boxColumn + jj] == v) {

					return false;
				}
			}
		}


		return true;
	}
	/**
	 * 
	 * @return
	 */
	public boolean isSolved() {
		for(int i = 0; i<truthTable.length; i++) {
			for(int k = 0; k<truthTable.length; k++){
				if(!truthTable[i][k]) {
					return truthTable[i][k];
				}
			}
		}
		return true;
	}


}
