
package sudoku.dialog;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Menu;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
//import java.io.IOException;
import java.net.URL;

import javax.swing.Action;
//import javax.sound.sampled.AudioInputStream;
//import javax.sound.sampled.AudioSystem;
//import javax.soun d.sampled.Clip;
//import javax.sound.sampled.LineUnavailableException;
//import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.JOptionPane;
import sudoku.model.Board;

/**
 * A dialog template for playing simple Sudoku games.
 * You need to write code for three callback methods:
 * newClicked(int), numberClicked(int) and boardClicked(int,int).
 *
 * @author Yoonsik Cheon
 */
@SuppressWarnings("serial")
public class SudokuDialog extends JFrame {
public static int inputVal;
    /** Default dimension of the dialog. */
    private final static Dimension DEFAULT_SIZE = new Dimension(310, 430);

    private final static String IMAGE_DIR = "/image/";

    /** Sudoku board. */
    private Board board;
    
    /** Special panel to display a Sudoku board. */
    private BoardPanel boardPanel;

    /** Message bar to display various messages. */
    private JLabel msgBar = new JLabel("");

    /** Create a new dialog. */
    public SudokuDialog() {
    this(DEFAULT_SIZE);
    }
    
    /** Create a new dialog of the given screen dimension. */
    public SudokuDialog(Dimension dim) {
        super("Sudoku");
        setSize(dim);
        board = new Board(9);
        boardPanel = new BoardPanel(board, this::boardClicked);
       configureUI();    
  
        //setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    
        setVisible(true);
        //setResizable(false);
    }

    /**
     * Callback to be invoked when a square of the board is clicked.
     * @param x 0-based row index of the clicked square.
     * @param y 0-based column index of the clicked square.
     */
    private void boardClicked(int x, int y) {
        board.insert(x,y,inputVal);
    showMessage(String.format("Board clicked: x = %d, y = %d",  x, y));
    repaint();
    }
    
    /**
     * Callback to be invoked when a number button is clicked.
     * @param number Clicked number (1-9), or 0 for "X".
     */
    private void numberClicked(int number) {
    	showMessage("Number clicked: " + number);
    	if( number > board.size || number <0){
    		showMessage("INVALID NUMBER FOR BOARD SIZE: "+ number);
    		
    	}
    	else{
    		inputVal = number;
    	}
    	
        
       // repaint();
    }
    
    /**
     * Callback to be invoked when a new button is clicked.
     * If the current game is over, start a new game of the given size;
     * otherwise, prompt the user for a confirmation and then proceed
     * accordingly.
     * @param size Requested puzzle size, either 4 or 9.
     */
    private void newClicked(int size) {
   int j = JOptionPane.showConfirmDialog(null, "Would you like to start a new game?");
    if(j==0) {
    board.size = size;
    int[][] newTable = board.getTable();
    for(int x =0; x<board.size;x++) {
    for(int y=0; y<board.size; y++) {
    newTable[x][y]=0;
   
    }
    }
    repaint();
    }
        showMessage("New clicked: " + size);
        repaint();
    }

//    private void solved(Board board) {
//    if(board.isSolved() == true) {
//    JOptionPane.showMessageDialog(null, "Congrats! Solved!");
//    else(board.isSolved() == false) {
//    JOptionPane.showMessageDialog(null, "NOT SOLVED BOI");
//
//    }
//   
//    }}
    
    /**
     * Display the given string in the message bar.
     * @param msg Message to be displayed.
     */
    private void showMessage(String msg) {
        msgBar.setText(msg);
   
    }

    /** Configure the UI. */
    private void configureUI() {
        setIconImage(createImageIcon("sudoku.png").getImage());
        setLayout(new BorderLayout());
        
        JPanel South = new JPanel();
        	South.setLayout(new BorderLayout());
        
        JPanel North = new JPanel();
        	North.setLayout(new BorderLayout());
        
        JPanel menu = createMenu();
        	menu.setBorder(BorderFactory.createEmptyBorder(10,16,0,16));
        add(menu, BorderLayout.NORTH); 
       
        
        
        
        
        
        
        
        
        
        
        //JPanel toolBar= createToolBar();
        
        JPanel content = new JPanel();
	    JToolBar bar = new JToolBar("TOOL BAR");
	    JButton button = new JButton("wassup");
	    content.add(bar.add(button));
	    content.setBorder(BorderFactory.createEmptyBorder(10,16,0,16));
        North.add(content, BorderLayout.WEST);
        setVisible(true);
  
        JPanel buttons = makeControlPanel();
        buttons.setBorder(BorderFactory.createEmptyBorder(10,16,0,16));
        add(buttons, BorderLayout.NORTH);
        
        JPanel board = new JPanel();
        board.setBorder(BorderFactory.createEmptyBorder(10,16,0,16));
        board.setLayout(new GridLayout(1,1));
        board.add(boardPanel);
        add(board, BorderLayout.CENTER);
        
        msgBar.setBorder(BorderFactory.createEmptyBorder(10,16,10,0));
        add(msgBar, BorderLayout.SOUTH);
    
        
        
        
        
        
        
       //JPanel p = new JPanel();

      // this.add(board);

//       JMenuBar bar = new JMenuBar();
//
//       JMenu menu = new JMenu("Menu");
//
//       bar.add(menu);
//
//       JMenuItem hint = new JMenuItem("Cheat Sheet");
//       
//        menu.add(hint);
//
//        JMenuItem solve = new JMenuItem("Solve");
//        menu.add(solve);
//        
//        JMenuItem solvable = new JMenuItem("Is your board solvable?");
//        menu.add(solvable);
//        
//        JMenuItem fill = new JMenuItem("Start with partially filled board");
//        menu.add(fill);
//        
//        
//        //bar.setLayout(new BorderLayout());
//
//        //board.add(bar, BorderLayout.SOUTH);
//        bar.setBorder(BorderFactory.createEmptyBorder());
//       
//        //bar.setBorder(BorderFactory.createEmptyBorder());
//	    add(bar, BorderLayout.NORTH); 

       }
        
        
        
    
    
      
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

	private JPanel createToolBar() {
	
	    JPanel content = new JPanel();
	    JToolBar bar = new JToolBar("TOOL BAR");
	    JButton button = new JButton("wassup");
	    content.add(bar.add(button));
	    content.setVisible(true);
	    return content;
	    
	    
	    
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	private JPanel createMenu() {
		JPanel menus = new JPanel();
		JMenuBar menuBar = new JMenuBar();
		JMenu menu = new JMenu("Menu");
		
		 menu.setMnemonic(KeyEvent.VK_G);
		 menu.getAccessibleContext().setAccessibleDescription("MENU");
		 menuBar.add(menu);
		 
		 JMenuItem menuItem = new JMenuItem("New Game", KeyEvent.VK_N);
		 menuItem.setIcon(createImageIcon("newGame.png"));
		 
		 JMenuItem menuItem1 = new JMenuItem("Hints", KeyEvent.VK_N);
		 menuItem.setIcon(createImageIcon("newGame.png"));
		 
		 JMenuItem menuItem2 = new JMenuItem("Is it solvable?", KeyEvent.VK_N);
		 menuItem.setIcon(createImageIcon("newGame.png"));
		 
		 JMenuItem menuItem3 = new JMenuItem("Solve", KeyEvent.VK_N);
		 menuItem.setIcon(createImageIcon("newGame.png"));
		 
		 
		
		
		menu.add(menuItem);
		menu.add(menuItem1);
		menu.add(menuItem2);
		menu.add(menuItem3);


		
		
		setJMenuBar(menuBar);
		setVisible(true);
		
		return menus;	
	}
	
	
	
	
	
//		menuBar = new JMenuBar();
//		menu = new JMenu("Fill");
//		
//		menu.setMnemonic(KeyEvent.VK_A);
//		menuBar.add(menu);
//		
//		
//	    JPanel content = new JPanel();
//	    //content.setLayout(new BoxLayout(content, BoxLayout.PAGE_AXIS));
//	     
//	        content.add(menuBar, menu);
//	    setVisible(true);
//	        return content;
		
	
	
	
	        
	        
	        
	

	
	
	
	
	
	
	
	
	
	/** Create a control panel consisting of new and number buttons. */
    private JPanel makeControlPanel() {
    
    	
    	JPanel newButtons = new JPanel(new FlowLayout());
       
    	JButton new4Button = new JButton("New (4x4)");
       
    	for (JButton button: new JButton[] { new4Button, new JButton("New (9x9)") }) {
        button.setFocusPainted(false);
            button.addActionListener(e -> {
                newClicked(e.getSource() == new4Button ? 4 : 9);
            });
            newButtons.add(button);
        }
    newButtons.setAlignmentX(LEFT_ALIGNMENT);
        
    
    
    // buttons labeled 1, 2, ..., 9, and X.
    JPanel numberButtons = new JPanel(new FlowLayout());
    int maxNumber = board.size() + 1;
    for (int i = 1; i <= maxNumber; i++) {
            int number = i % maxNumber;
            JButton button = new JButton(number == 0 ? "X" : String.valueOf(number));
            button.setFocusPainted(false);
            button.setMargin(new Insets(0,2,0,2));
            button.addActionListener(e -> numberClicked(number));
    numberButtons.add(button);
    }
    numberButtons.setAlignmentX(LEFT_ALIGNMENT);
    
    

    
    
    JPanel content = new JPanel();
    content.setLayout(new BoxLayout(content, BoxLayout.PAGE_AXIS));
        content.add(newButtons);
        content.add(numberButtons);
        return content;
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    /** Create an image icon from the given image file. */
    private ImageIcon createImageIcon(String filename) {
        URL imageUrl = getClass().getResource(IMAGE_DIR + filename);
        if (imageUrl != null) {
            return new ImageIcon(imageUrl);
        }
        return null;
    }
    

    
    
    public static void main(String[] args) {
       new SudokuDialog();
    }
    
    }



